<?php

declare(strict_types=1);

/*
 * This file is part of the Jira SDK Laravel project.
 *
 * (c) Nick Haynes (https://github.com/nhaynes)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace JiraSdk\Laravel;

use Illuminate\Support\Facades\Facade;

/**
 * @method static \JiraSdk\Api\Model\AnnouncementBannerConfiguration|\Psr\Http\Message\ResponseInterface|null                     getBanner(string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setBanner(Model\AnnouncementBannerConfigurationUpdate $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateMultipleCustomFieldValues(Model\MultipleCustomFieldValuesUpdateDetails $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanContextualConfiguration|\Psr\Http\Message\ResponseInterface|null                     getCustomFieldConfiguration(string $fieldIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateCustomFieldConfiguration(string $fieldIdOrKey, Model\CustomFieldConfigurations $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateCustomFieldValue(string $fieldIdOrKey, Model\CustomFieldValueUpdateDetails $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ApplicationProperty[]|\Psr\Http\Message\ResponseInterface|null                               getApplicationProperty(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ApplicationProperty[]|\Psr\Http\Message\ResponseInterface|null                               getAdvancedSettings(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ApplicationProperty|\Psr\Http\Message\ResponseInterface|null                                 setApplicationProperty(string $id, Model\SimpleApplicationPropertyBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ApplicationRole[]|\Psr\Http\Message\ResponseInterface|null                                   getAllApplicationRoles(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ApplicationRole|\Psr\Http\Message\ResponseInterface|null                                     getApplicationRole(string $key, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        getAttachmentContent(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\AttachmentSettings|\Psr\Http\Message\ResponseInterface|null                                  getAttachmentMeta(string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        getAttachmentThumbnail(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeAttachment(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\AttachmentMetadata|\Psr\Http\Message\ResponseInterface|null                                  getAttachment(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\AttachmentArchiveMetadataReadable|\Psr\Http\Message\ResponseInterface|null                   expandAttachmentForHumans(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\AttachmentArchiveImpl|\Psr\Http\Message\ResponseInterface|null                               expandAttachmentForMachines(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\AuditRecords|\Psr\Http\Message\ResponseInterface|null                                        getAuditRecords(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SystemAvatars|\Psr\Http\Message\ResponseInterface|null                                       getAllSystemAvatars(string $type, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanComment|\Psr\Http\Message\ResponseInterface|null                                     getCommentsByIds(Model\IssueCommentListRequestBean $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PropertyKeys|\Psr\Http\Message\ResponseInterface|null                                        getCommentPropertyKeys(string $commentId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteCommentProperty(string $commentId, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\EntityProperty|\Psr\Http\Message\ResponseInterface|null                                      getCommentProperty(string $commentId, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setCommentProperty(string $commentId, string $propertyKey, $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectComponent|\Psr\Http\Message\ResponseInterface|null                                    createComponent(Model\ProjectComponent $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteComponent(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectComponent|\Psr\Http\Message\ResponseInterface|null                                    getComponent(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectComponent|\Psr\Http\Message\ResponseInterface|null                                    updateComponent(string $id, Model\ProjectComponent $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ComponentIssuesCount|\Psr\Http\Message\ResponseInterface|null                                getComponentRelatedIssues(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Configuration|\Psr\Http\Message\ResponseInterface|null                                       getConfiguration(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TimeTrackingProvider|\Psr\Http\Message\ResponseInterface|null                                getSelectedTimeTrackingImplementation(string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        selectTimeTrackingImplementation(Model\TimeTrackingProvider $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TimeTrackingProvider[]|\Psr\Http\Message\ResponseInterface|null                              getAvailableTimeTrackingImplementations(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TimeTrackingConfiguration|\Psr\Http\Message\ResponseInterface|null                           getSharedTimeTrackingConfiguration(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TimeTrackingConfiguration|\Psr\Http\Message\ResponseInterface|null                           setSharedTimeTrackingConfiguration(Model\TimeTrackingConfiguration $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\CustomFieldOption|\Psr\Http\Message\ResponseInterface|null                                   getCustomFieldOption(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageOfDashboards|\Psr\Http\Message\ResponseInterface|null                                    getAllDashboards(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Dashboard|\Psr\Http\Message\ResponseInterface|null                                           createDashboard(Model\DashboardDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\AvailableDashboardGadgetsResponse|\Psr\Http\Message\ResponseInterface|null                   getAllAvailableDashboardGadgets(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanDashboard|\Psr\Http\Message\ResponseInterface|null                                   getDashboardsPaginated(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\DashboardGadgetResponse|\Psr\Http\Message\ResponseInterface|null                             getAllGadgets(int $dashboardId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\DashboardGadget|\Psr\Http\Message\ResponseInterface|null                                     addGadget(int $dashboardId, Model\DashboardGadgetSettings $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeGadget(int $dashboardId, int $gadgetId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateGadget(int $dashboardId, int $gadgetId, Model\DashboardGadgetUpdateRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PropertyKeys|\Psr\Http\Message\ResponseInterface|null                                        getDashboardItemPropertyKeys(string $dashboardId, string $itemId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteDashboardItemProperty(string $dashboardId, string $itemId, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\EntityProperty|\Psr\Http\Message\ResponseInterface|null                                      getDashboardItemProperty(string $dashboardId, string $itemId, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setDashboardItemProperty(string $dashboardId, string $itemId, string $propertyKey, $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteDashboard(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Dashboard|\Psr\Http\Message\ResponseInterface|null                                           getDashboard(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Dashboard|\Psr\Http\Message\ResponseInterface|null                                           updateDashboard(string $id, Model\DashboardDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Dashboard|\Psr\Http\Message\ResponseInterface|null                                           copyDashboard(string $id, Model\DashboardDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueEvent[]|\Psr\Http\Message\ResponseInterface|null                                        getEvents(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\JiraExpressionsAnalysis|\Psr\Http\Message\ResponseInterface|null                             analyseExpression(Model\JiraExpressionForAnalysis $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\JiraExpressionResult|\Psr\Http\Message\ResponseInterface|null                                evaluateJiraExpression(Model\JiraExpressionEvalRequestBean $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\FieldDetails[]|\Psr\Http\Message\ResponseInterface|null                                      getFields(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\FieldDetails|\Psr\Http\Message\ResponseInterface|null                                        createCustomField(Model\CustomFieldDefinitionJsonBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanField|\Psr\Http\Message\ResponseInterface|null                                       getFieldsPaginated(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanField|\Psr\Http\Message\ResponseInterface|null                                       getTrashedFieldsPaginated(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateCustomField(string $fieldId, Model\UpdateCustomFieldDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanCustomFieldContext|\Psr\Http\Message\ResponseInterface|null                          getContextsForField(string $fieldId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\CreateCustomFieldContext|\Psr\Http\Message\ResponseInterface|null                            createCustomFieldContext(string $fieldId, Model\CreateCustomFieldContext $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanCustomFieldContextDefaultValue|\Psr\Http\Message\ResponseInterface|null              getDefaultValues(string $fieldId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setDefaultValues(string $fieldId, Model\CustomFieldContextDefaultValueUpdate $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueTypeToContextMapping|\Psr\Http\Message\ResponseInterface|null                   getIssueTypeMappingsForContexts(string $fieldId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanContextForProjectAndIssueType|\Psr\Http\Message\ResponseInterface|null               getCustomFieldContextsForProjectsAndIssueTypes(string $fieldId, Model\ProjectIssueTypeMappings $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanCustomFieldContextProjectMapping|\Psr\Http\Message\ResponseInterface|null            getProjectContextMapping(string $fieldId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteCustomFieldContext(string $fieldId, int $contextId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateCustomFieldContext(string $fieldId, int $contextId, Model\CustomFieldContextUpdateDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        addIssueTypesToContext(string $fieldId, int $contextId, Model\IssueTypeIds $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeIssueTypesFromContext(string $fieldId, int $contextId, Model\IssueTypeIds $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanCustomFieldContextOption|\Psr\Http\Message\ResponseInterface|null                    getOptionsForContext(string $fieldId, int $contextId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\CustomFieldCreatedContextOptionsList|\Psr\Http\Message\ResponseInterface|null                createCustomFieldOption(string $fieldId, int $contextId, Model\BulkCustomFieldOptionCreateRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\CustomFieldUpdatedContextOptionsList|\Psr\Http\Message\ResponseInterface|null                updateCustomFieldOption(string $fieldId, int $contextId, Model\BulkCustomFieldOptionUpdateRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        reorderCustomFieldOptions(string $fieldId, int $contextId, Model\OrderOfCustomFieldOptions $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteCustomFieldOption(string $fieldId, int $contextId, int $optionId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        assignProjectsToCustomFieldContext(string $fieldId, int $contextId, Model\ProjectIds $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeCustomFieldContextFromProjects(string $fieldId, int $contextId, Model\ProjectIds $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanContext|\Psr\Http\Message\ResponseInterface|null                                     getContextsForFieldDeprecated(string $fieldId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanScreenWithTab|\Psr\Http\Message\ResponseInterface|null                               getScreensForField(string $fieldId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueFieldOption|\Psr\Http\Message\ResponseInterface|null                            getAllIssueFieldOptions(string $fieldKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueFieldOption|\Psr\Http\Message\ResponseInterface|null                                    createIssueFieldOption(string $fieldKey, Model\IssueFieldOptionCreateBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueFieldOption|\Psr\Http\Message\ResponseInterface|null                            getSelectableIssueFieldOptions(string $fieldKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueFieldOption|\Psr\Http\Message\ResponseInterface|null                            getVisibleIssueFieldOptions(string $fieldKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteIssueFieldOption(string $fieldKey, int $optionId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueFieldOption|\Psr\Http\Message\ResponseInterface|null                                    getIssueFieldOption(string $fieldKey, int $optionId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueFieldOption|\Psr\Http\Message\ResponseInterface|null                                    updateIssueFieldOption(string $fieldKey, int $optionId, Model\IssueFieldOption $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TaskProgressBeanRemoveOptionFromIssuesResult|\Psr\Http\Message\ResponseInterface|null        replaceIssueFieldOption(string $fieldKey, int $optionId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TaskProgressBeanObject|\Psr\Http\Message\ResponseInterface|null                              deleteCustomField(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        restoreCustomField(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        trashCustomField(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanFieldConfigurationDetails|\Psr\Http\Message\ResponseInterface|null                   getAllFieldConfigurations(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\FieldConfiguration|\Psr\Http\Message\ResponseInterface|null                                  createFieldConfiguration(Model\FieldConfigurationDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteFieldConfiguration(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateFieldConfiguration(int $id, Model\FieldConfigurationDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanFieldConfigurationItem|\Psr\Http\Message\ResponseInterface|null                      getFieldConfigurationItems(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateFieldConfigurationItems(int $id, Model\FieldConfigurationItemsDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanFieldConfigurationScheme|\Psr\Http\Message\ResponseInterface|null                    getAllFieldConfigurationSchemes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\FieldConfigurationScheme|\Psr\Http\Message\ResponseInterface|null                            createFieldConfigurationScheme(Model\UpdateFieldConfigurationSchemeDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanFieldConfigurationIssueTypeItem|\Psr\Http\Message\ResponseInterface|null             getFieldConfigurationSchemeMappings(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanFieldConfigurationSchemeProjects|\Psr\Http\Message\ResponseInterface|null            getFieldConfigurationSchemeProjectMapping(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        assignFieldConfigurationSchemeToProject(Model\FieldConfigurationSchemeProjectAssociation $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteFieldConfigurationScheme(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateFieldConfigurationScheme(int $id, Model\UpdateFieldConfigurationSchemeDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setFieldConfigurationSchemeMapping(int $id, Model\AssociateFieldConfigurationsWithIssueTypesRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeIssueTypesFromGlobalFieldConfigurationScheme(int $id, Model\IssueTypeIdsToRemove $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Filter[]|\Psr\Http\Message\ResponseInterface|null                                            getFilters(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Filter|\Psr\Http\Message\ResponseInterface|null                                              createFilter(Model\Filter $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\DefaultShareScope|\Psr\Http\Message\ResponseInterface|null                                   getDefaultShareScope(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\DefaultShareScope|\Psr\Http\Message\ResponseInterface|null                                   setDefaultShareScope(Model\DefaultShareScope $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Filter[]|\Psr\Http\Message\ResponseInterface|null                                            getFavouriteFilters(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Filter[]|\Psr\Http\Message\ResponseInterface|null                                            getMyFilters(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanFilterDetails|\Psr\Http\Message\ResponseInterface|null                               getFiltersPaginated(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteFilter(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Filter|\Psr\Http\Message\ResponseInterface|null                                              getFilter(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Filter|\Psr\Http\Message\ResponseInterface|null                                              updateFilter(int $id, Model\Filter $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        resetColumns(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ColumnItem[]|\Psr\Http\Message\ResponseInterface|null                                        getColumns(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setColumns(int $id, ?array $requestBody = null, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Filter|\Psr\Http\Message\ResponseInterface|null                                              deleteFavouriteForFilter(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Filter|\Psr\Http\Message\ResponseInterface|null                                              setFavouriteForFilter(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        changeFilterOwner(int $id, Model\ChangeFilterOwner $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SharePermission[]|\Psr\Http\Message\ResponseInterface|null                                   getSharePermissions(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SharePermission[]|\Psr\Http\Message\ResponseInterface|null                                   addSharePermission(int $id, Model\SharePermissionInputBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteSharePermission(int $id, int $permissionId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SharePermission|\Psr\Http\Message\ResponseInterface|null                                     getSharePermission(int $id, int $permissionId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeGroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Group|\Psr\Http\Message\ResponseInterface|null                                               getGroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Group|\Psr\Http\Message\ResponseInterface|null                                               createGroup(Model\AddGroupBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanGroupDetails|\Psr\Http\Message\ResponseInterface|null                                bulkGetGroups(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanUserDetails|\Psr\Http\Message\ResponseInterface|null                                 getUsersFromGroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeUserFromGroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Group|\Psr\Http\Message\ResponseInterface|null                                               addUserToGroup(Model\UpdateUserToGroupBean $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\FoundGroups|\Psr\Http\Message\ResponseInterface|null                                         findGroups(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\FoundUsersAndGroups|\Psr\Http\Message\ResponseInterface|null                                 findUsersAndGroups(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\License|\Psr\Http\Message\ResponseInterface|null                                             getLicense(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\CreatedIssue|\Psr\Http\Message\ResponseInterface|null                                        createIssue(Model\IssueUpdateDetails $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\CreatedIssues|\Psr\Http\Message\ResponseInterface|null                                       createIssues(Model\IssuesUpdateBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueCreateMetadata|\Psr\Http\Message\ResponseInterface|null                                 getCreateIssueMeta(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssuePickerSuggestions|\Psr\Http\Message\ResponseInterface|null                              getIssuePickerResource(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        bulkSetIssuesPropertiesList(Model\IssueEntityProperties $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        bulkSetIssuePropertiesByIssue(Model\MultiIssueEntityProperties $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        bulkDeleteIssueProperty(string $propertyKey, Model\IssueFilterForBulkPropertyDelete $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        bulkSetIssueProperty(string $propertyKey, Model\BulkIssuePropertyUpdateRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\BulkIssueIsWatching|\Psr\Http\Message\ResponseInterface|null                                 getIsWatchingIssueBulk(Model\IssueList $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteIssue(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueBean|\Psr\Http\Message\ResponseInterface|null                                           getIssue(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        editIssue(string $issueIdOrKey, Model\IssueUpdateDetails $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        assignIssue(string $issueIdOrKey, Model\User $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Attachment[]|\Psr\Http\Message\ResponseInterface|null                                        addAttachment(string $issueIdOrKey, $requestBody = null, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanChangelog|\Psr\Http\Message\ResponseInterface|null                                   getChangeLogs(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageOfChangelogs|\Psr\Http\Message\ResponseInterface|null                                    getChangeLogsByIds(string $issueIdOrKey, Model\IssueChangelogIds $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageOfComments|\Psr\Http\Message\ResponseInterface|null                                      getComments(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Comment|\Psr\Http\Message\ResponseInterface|null                                             addComment(string $issueIdOrKey, Model\Comment $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteComment(string $issueIdOrKey, string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Comment|\Psr\Http\Message\ResponseInterface|null                                             getComment(string $issueIdOrKey, string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Comment|\Psr\Http\Message\ResponseInterface|null                                             updateComment(string $issueIdOrKey, string $id, Model\Comment $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueUpdateMetadata|\Psr\Http\Message\ResponseInterface|null                                 getEditIssueMeta(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        notify(string $issueIdOrKey, Model\Notification $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PropertyKeys|\Psr\Http\Message\ResponseInterface|null                                        getIssuePropertyKeys(string $issueIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteIssueProperty(string $issueIdOrKey, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\EntityProperty|\Psr\Http\Message\ResponseInterface|null                                      getIssueProperty(string $issueIdOrKey, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setIssueProperty(string $issueIdOrKey, string $propertyKey, $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteRemoteIssueLinkByGlobalId(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\RemoteIssueLink|\Psr\Http\Message\ResponseInterface|null                                     getRemoteIssueLinks(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\RemoteIssueLinkIdentifies|\Psr\Http\Message\ResponseInterface|null                           createOrUpdateRemoteIssueLink(string $issueIdOrKey, Model\RemoteIssueLinkRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteRemoteIssueLinkById(string $issueIdOrKey, string $linkId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\RemoteIssueLink|\Psr\Http\Message\ResponseInterface|null                                     getRemoteIssueLinkById(string $issueIdOrKey, string $linkId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateRemoteIssueLink(string $issueIdOrKey, string $linkId, Model\RemoteIssueLinkRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Transitions|\Psr\Http\Message\ResponseInterface|null                                         getTransitions(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        doTransition(string $issueIdOrKey, Model\IssueUpdateDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeVote(string $issueIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Votes|\Psr\Http\Message\ResponseInterface|null                                               getVotes(string $issueIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        addVote(string $issueIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeWatcher(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Watchers|\Psr\Http\Message\ResponseInterface|null                                            getIssueWatchers(string $issueIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        addWatcher(string $issueIdOrKey, string $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageOfWorklogs|\Psr\Http\Message\ResponseInterface|null                                      getIssueWorklog(string $issueIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Worklog|\Psr\Http\Message\ResponseInterface|null                                             addWorklog(string $issueIdOrKey, Model\Worklog $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteWorklog(string $issueIdOrKey, string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Worklog|\Psr\Http\Message\ResponseInterface|null                                             getWorklog(string $issueIdOrKey, string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Worklog|\Psr\Http\Message\ResponseInterface|null                                             updateWorklog(string $issueIdOrKey, string $id, Model\Worklog $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PropertyKeys|\Psr\Http\Message\ResponseInterface|null                                        getWorklogPropertyKeys(string $issueIdOrKey, string $worklogId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteWorklogProperty(string $issueIdOrKey, string $worklogId, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\EntityProperty|\Psr\Http\Message\ResponseInterface|null                                      getWorklogProperty(string $issueIdOrKey, string $worklogId, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setWorklogProperty(string $issueIdOrKey, string $worklogId, string $propertyKey, $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        linkIssues(Model\LinkIssueRequestJsonBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteIssueLink(string $linkId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueLink|\Psr\Http\Message\ResponseInterface|null                                           getIssueLink(string $linkId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueLinkTypes|\Psr\Http\Message\ResponseInterface|null                                      getIssueLinkTypes(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueLinkType|\Psr\Http\Message\ResponseInterface|null                                       createIssueLinkType(Model\IssueLinkType $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteIssueLinkType(string $issueLinkTypeId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueLinkType|\Psr\Http\Message\ResponseInterface|null                                       getIssueLinkType(string $issueLinkTypeId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueLinkType|\Psr\Http\Message\ResponseInterface|null                                       updateIssueLinkType(string $issueLinkTypeId, Model\IssueLinkType $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SecuritySchemes|\Psr\Http\Message\ResponseInterface|null                                     getIssueSecuritySchemes(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SecurityScheme|\Psr\Http\Message\ResponseInterface|null                                      getIssueSecurityScheme(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueSecurityLevelMember|\Psr\Http\Message\ResponseInterface|null                    getIssueSecurityLevelMembers(int $issueSecuritySchemeId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeDetails[]|\Psr\Http\Message\ResponseInterface|null                                  getIssueAllTypes(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeDetails|\Psr\Http\Message\ResponseInterface|null                                    createIssueType(Model\IssueTypeCreateBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeDetails[]|\Psr\Http\Message\ResponseInterface|null                                  getIssueTypesForProject(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteIssueType(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeDetails|\Psr\Http\Message\ResponseInterface|null                                    getIssueType(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeDetails|\Psr\Http\Message\ResponseInterface|null                                    updateIssueType(string $id, Model\IssueTypeUpdateBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeDetails[]|\Psr\Http\Message\ResponseInterface|null                                  getAlternativeIssueTypes(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Avatar|\Psr\Http\Message\ResponseInterface|null                                              createIssueTypeAvatar(string $id, $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PropertyKeys|\Psr\Http\Message\ResponseInterface|null                                        getIssueTypePropertyKeys(string $issueTypeId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteIssueTypeProperty(string $issueTypeId, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\EntityProperty|\Psr\Http\Message\ResponseInterface|null                                      getIssueTypeProperty(string $issueTypeId, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setIssueTypeProperty(string $issueTypeId, string $propertyKey, $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueTypeScheme|\Psr\Http\Message\ResponseInterface|null                             getAllIssueTypeSchemes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeSchemeID|\Psr\Http\Message\ResponseInterface|null                                   createIssueTypeScheme(Model\IssueTypeSchemeDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueTypeSchemeMapping|\Psr\Http\Message\ResponseInterface|null                      getIssueTypeSchemesMapping(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueTypeSchemeProjects|\Psr\Http\Message\ResponseInterface|null                     getIssueTypeSchemeForProjects(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        assignIssueTypeSchemeToProject(Model\IssueTypeSchemeProjectAssociation $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteIssueTypeScheme(int $issueTypeSchemeId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateIssueTypeScheme(int $issueTypeSchemeId, Model\IssueTypeSchemeUpdateDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        addIssueTypesToIssueTypeScheme(int $issueTypeSchemeId, Model\IssueTypeIds $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        reorderIssueTypesInIssueTypeScheme(int $issueTypeSchemeId, Model\OrderOfIssueTypes $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeIssueTypeFromIssueTypeScheme(int $issueTypeSchemeId, int $issueTypeId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueTypeScreenScheme|\Psr\Http\Message\ResponseInterface|null                       getIssueTypeScreenSchemes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeScreenSchemeId|\Psr\Http\Message\ResponseInterface|null                             createIssueTypeScreenScheme(Model\IssueTypeScreenSchemeDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueTypeScreenSchemeItem|\Psr\Http\Message\ResponseInterface|null                   getIssueTypeScreenSchemeMappings(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanIssueTypeScreenSchemesProjects|\Psr\Http\Message\ResponseInterface|null              getIssueTypeScreenSchemeProjectAssociations(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        assignIssueTypeScreenSchemeToProject(Model\IssueTypeScreenSchemeProjectAssociation $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteIssueTypeScreenScheme(string $issueTypeScreenSchemeId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateIssueTypeScreenScheme(string $issueTypeScreenSchemeId, Model\IssueTypeScreenSchemeUpdateDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        appendMappingsForIssueTypeScreenScheme(string $issueTypeScreenSchemeId, Model\IssueTypeScreenSchemeMappingDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateDefaultScreenScheme(string $issueTypeScreenSchemeId, Model\UpdateDefaultScreenScheme $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeMappingsFromIssueTypeScreenScheme(string $issueTypeScreenSchemeId, Model\IssueTypeIds $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanProjectDetails|\Psr\Http\Message\ResponseInterface|null                              getProjectsForIssueTypeScreenScheme(int $issueTypeScreenSchemeId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\JQLReferenceData|\Psr\Http\Message\ResponseInterface|null                                    getAutoComplete(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\JQLReferenceData|\Psr\Http\Message\ResponseInterface|null                                    getAutoCompletePost(Model\SearchAutoCompleteFilter $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\AutoCompleteSuggestions|\Psr\Http\Message\ResponseInterface|null                             getFieldAutoCompleteForQueryString(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueMatches|\Psr\Http\Message\ResponseInterface|null                                        matchIssues(Model\IssuesAndJQLQueries $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ParsedJqlQueries|\Psr\Http\Message\ResponseInterface|null                                    parseJqlQueries(Model\JqlQueriesToParse $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ConvertedJQLQueries|\Psr\Http\Message\ResponseInterface|null                                 migrateQueries(Model\JQLPersonalDataMigrationRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SanitizedJqlQueries|\Psr\Http\Message\ResponseInterface|null                                 sanitiseJqlQueries(Model\JqlQueriesToSanitize $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanString|\Psr\Http\Message\ResponseInterface|null                                      getAllLabels(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Permissions|\Psr\Http\Message\ResponseInterface|null                                         getMyPermissions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removePreference(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        getPreference(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setPreference(string $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteLocale(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Locale|\Psr\Http\Message\ResponseInterface|null                                              getLocale(string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setLocale(Model\Locale $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User|\Psr\Http\Message\ResponseInterface|null                                                getCurrentUser(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanNotificationScheme|\Psr\Http\Message\ResponseInterface|null                          getNotificationSchemes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\NotificationSchemeId|\Psr\Http\Message\ResponseInterface|null                                createNotificationScheme(Model\CreateNotificationSchemeDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanNotificationSchemeAndProjectMappingJsonBean|\Psr\Http\Message\ResponseInterface|null getNotificationSchemeToProjectMappings(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\NotificationScheme|\Psr\Http\Message\ResponseInterface|null                                  getNotificationScheme(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateNotificationScheme(string $id, Model\UpdateNotificationSchemeDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        addNotifications(string $id, Model\AddNotificationsDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteNotificationScheme(string $notificationSchemeId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeNotificationFromNotificationScheme(string $notificationSchemeId, string $notificationId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Permissions|\Psr\Http\Message\ResponseInterface|null                                         getAllPermissions(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\BulkPermissionGrants|\Psr\Http\Message\ResponseInterface|null                                getBulkPermissions(Model\BulkPermissionsRequestBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermittedProjects|\Psr\Http\Message\ResponseInterface|null                                   getPermittedProjects(Model\PermissionsKeysBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermissionSchemes|\Psr\Http\Message\ResponseInterface|null                                   getAllPermissionSchemes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermissionScheme|\Psr\Http\Message\ResponseInterface|null                                    createPermissionScheme(Model\PermissionScheme $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deletePermissionScheme(int $schemeId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermissionScheme|\Psr\Http\Message\ResponseInterface|null                                    getPermissionScheme(int $schemeId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermissionScheme|\Psr\Http\Message\ResponseInterface|null                                    updatePermissionScheme(int $schemeId, Model\PermissionScheme $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermissionGrants|\Psr\Http\Message\ResponseInterface|null                                    getPermissionSchemeGrants(int $schemeId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermissionGrant|\Psr\Http\Message\ResponseInterface|null                                     createPermissionGrant(int $schemeId, Model\PermissionGrant $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deletePermissionSchemeEntity(int $schemeId, int $permissionId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermissionGrant|\Psr\Http\Message\ResponseInterface|null                                     getPermissionSchemeGrant(int $schemeId, int $permissionId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Priority[]|\Psr\Http\Message\ResponseInterface|null                                          getPriorities(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PriorityId|\Psr\Http\Message\ResponseInterface|null                                          createPriority(Model\CreatePriorityDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setDefaultPriority(Model\SetDefaultPriorityRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        movePriorities(Model\ReorderIssuePriorities $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanPriority|\Psr\Http\Message\ResponseInterface|null                                    searchPriorities(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TaskProgressBeanObject|\Psr\Http\Message\ResponseInterface|null                              deletePriority(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Priority|\Psr\Http\Message\ResponseInterface|null                                            getPriority(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updatePriority(string $id, Model\UpdatePriorityDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Project[]|\Psr\Http\Message\ResponseInterface|null                                           getAllProjects(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectIdentifiers|\Psr\Http\Message\ResponseInterface|null                                  createProject(Model\CreateProjectDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Project[]|\Psr\Http\Message\ResponseInterface|null                                           getRecent(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanProject|\Psr\Http\Message\ResponseInterface|null                                     searchProjects(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectType[]|\Psr\Http\Message\ResponseInterface|null                                       getAllProjectTypes(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectType[]|\Psr\Http\Message\ResponseInterface|null                                       getAllAccessibleProjectTypes(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectType|\Psr\Http\Message\ResponseInterface|null                                         getProjectTypeByKey(string $projectTypeKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectType|\Psr\Http\Message\ResponseInterface|null                                         getAccessibleProjectTypeByKey(string $projectTypeKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteProject(string $projectIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Project|\Psr\Http\Message\ResponseInterface|null                                             getProject(string $projectIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Project|\Psr\Http\Message\ResponseInterface|null                                             updateProject(string $projectIdOrKey, Model\UpdateProjectDetails $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        archiveProject(string $projectIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateProjectAvatar(string $projectIdOrKey, Model\Avatar $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteProjectAvatar(string $projectIdOrKey, int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Avatar|\Psr\Http\Message\ResponseInterface|null                                              createProjectAvatar(string $projectIdOrKey, $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectAvatars|\Psr\Http\Message\ResponseInterface|null                                      getAllProjectAvatars(string $projectIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanComponentWithIssueCount|\Psr\Http\Message\ResponseInterface|null                     getProjectComponentsPaginated(string $projectIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectComponent[]|\Psr\Http\Message\ResponseInterface|null                                  getProjectComponents(string $projectIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TaskProgressBeanObject|\Psr\Http\Message\ResponseInterface|null                              deleteProjectAsynchronously(string $projectIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ContainerForProjectFeatures|\Psr\Http\Message\ResponseInterface|null                         getFeaturesForProject(string $projectIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ContainerForProjectFeatures|\Psr\Http\Message\ResponseInterface|null                         toggleFeatureForProject(string $projectIdOrKey, string $featureKey, Model\ProjectFeatureState $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PropertyKeys|\Psr\Http\Message\ResponseInterface|null                                        getProjectPropertyKeys(string $projectIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteProjectProperty(string $projectIdOrKey, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\EntityProperty|\Psr\Http\Message\ResponseInterface|null                                      getProjectProperty(string $projectIdOrKey, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setProjectProperty(string $projectIdOrKey, string $propertyKey, $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Project|\Psr\Http\Message\ResponseInterface|null                                             restore(string $projectIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        getProjectRoles(string $projectIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteActor(string $projectIdOrKey, int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         getProjectRole(string $projectIdOrKey, int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         addActorUsers(string $projectIdOrKey, int $id, Model\ActorsMap $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         setActors(string $projectIdOrKey, int $id, Model\ProjectRoleActorsUpdateBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRoleDetails[]|\Psr\Http\Message\ResponseInterface|null                                getProjectRoleDetails(string $projectIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeWithStatus[]|\Psr\Http\Message\ResponseInterface|null                               getAllStatuses(string $projectIdOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Project|\Psr\Http\Message\ResponseInterface|null                                             updateProjectType(string $projectIdOrKey, string $newProjectTypeKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanVersion|\Psr\Http\Message\ResponseInterface|null                                     getProjectVersionsPaginated(string $projectIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Version[]|\Psr\Http\Message\ResponseInterface|null                                           getProjectVersions(string $projectIdOrKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectEmailAddress|\Psr\Http\Message\ResponseInterface|null                                 getProjectEmail(int $projectId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateProjectEmail(int $projectId, Model\ProjectEmailAddress $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectIssueTypeHierarchy|\Psr\Http\Message\ResponseInterface|null                           getHierarchy(int $projectId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SecurityScheme|\Psr\Http\Message\ResponseInterface|null                                      getProjectIssueSecurityScheme(string $projectKeyOrId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\NotificationScheme|\Psr\Http\Message\ResponseInterface|null                                  getNotificationSchemeForProject(string $projectKeyOrId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermissionScheme|\Psr\Http\Message\ResponseInterface|null                                    getAssignedPermissionScheme(string $projectKeyOrId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PermissionScheme|\Psr\Http\Message\ResponseInterface|null                                    assignPermissionScheme(string $projectKeyOrId, Model\IdBean $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectIssueSecurityLevels|\Psr\Http\Message\ResponseInterface|null                          getSecurityLevelsForProject(string $projectKeyOrId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectCategory[]|\Psr\Http\Message\ResponseInterface|null                                   getAllProjectCategories(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectCategory|\Psr\Http\Message\ResponseInterface|null                                     createProjectCategory(Model\ProjectCategory $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeProjectCategory(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectCategory|\Psr\Http\Message\ResponseInterface|null                                     getProjectCategoryById(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\UpdatedProjectCategory|\Psr\Http\Message\ResponseInterface|null                              updateProjectCategory(int $id, Model\ProjectCategory $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ErrorCollection|\Psr\Http\Message\ResponseInterface|null                                     validateProjectKey(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        getValidProjectKey(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        getValidProjectName(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Resolution[]|\Psr\Http\Message\ResponseInterface|null                                        getResolutions(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ResolutionId|\Psr\Http\Message\ResponseInterface|null                                        createResolution(Model\CreateResolutionDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setDefaultResolution(Model\SetDefaultResolutionRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        moveResolutions(Model\ReorderIssueResolutionsRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanResolutionJsonBean|\Psr\Http\Message\ResponseInterface|null                          searchResolutions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TaskProgressBeanObject|\Psr\Http\Message\ResponseInterface|null                              deleteResolution(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Resolution|\Psr\Http\Message\ResponseInterface|null                                          getResolution(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateResolution(string $id, Model\UpdateResolutionDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole[]|\Psr\Http\Message\ResponseInterface|null                                       getAllProjectRoles(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         createProjectRole(Model\CreateUpdateRoleRequestBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteProjectRole(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         getProjectRoleById(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         partialUpdateProjectRole(int $id, Model\CreateUpdateRoleRequestBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         fullyUpdateProjectRole(int $id, Model\CreateUpdateRoleRequestBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         deleteProjectRoleActorsFromRole(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         getProjectRoleActorsForRole(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ProjectRole|\Psr\Http\Message\ResponseInterface|null                                         addProjectRoleActorsToRole(int $id, Model\ActorInputBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanScreen|\Psr\Http\Message\ResponseInterface|null                                      getScreens(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Screen|\Psr\Http\Message\ResponseInterface|null                                              createScreen(Model\ScreenDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        addFieldToDefaultScreen(string $fieldId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteScreen(int $screenId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Screen|\Psr\Http\Message\ResponseInterface|null                                              updateScreen(int $screenId, Model\UpdateScreenDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ScreenableField[]|\Psr\Http\Message\ResponseInterface|null                                   getAvailableScreenFields(int $screenId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ScreenableTab[]|\Psr\Http\Message\ResponseInterface|null                                     getAllScreenTabs(int $screenId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ScreenableTab|\Psr\Http\Message\ResponseInterface|null                                       addScreenTab(int $screenId, Model\ScreenableTab $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteScreenTab(int $screenId, int $tabId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ScreenableTab|\Psr\Http\Message\ResponseInterface|null                                       renameScreenTab(int $screenId, int $tabId, Model\ScreenableTab $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ScreenableField[]|\Psr\Http\Message\ResponseInterface|null                                   getAllScreenTabFields(int $screenId, int $tabId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ScreenableField|\Psr\Http\Message\ResponseInterface|null                                     addScreenTabField(int $screenId, int $tabId, Model\AddFieldBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeScreenTabField(int $screenId, int $tabId, string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        moveScreenTabField(int $screenId, int $tabId, string $id, Model\MoveFieldBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        moveScreenTab(int $screenId, int $tabId, int $pos, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanScreenScheme|\Psr\Http\Message\ResponseInterface|null                                getScreenSchemes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ScreenSchemeId|\Psr\Http\Message\ResponseInterface|null                                      createScreenScheme(Model\ScreenSchemeDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteScreenScheme(string $screenSchemeId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateScreenScheme(string $screenSchemeId, Model\UpdateScreenSchemeDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SearchResults|\Psr\Http\Message\ResponseInterface|null                                       searchForIssuesUsingJql(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SearchResults|\Psr\Http\Message\ResponseInterface|null                                       searchForIssuesUsingJqlPost(Model\SearchRequestBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\SecurityLevel|\Psr\Http\Message\ResponseInterface|null                                       getIssueSecurityLevel(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ServerInformation|\Psr\Http\Message\ResponseInterface|null                                   getServerInfo(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ColumnItem[]|\Psr\Http\Message\ResponseInterface|null                                        getIssueNavigatorDefaultColumns(string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setIssueNavigatorDefaultColumns(?array $requestBody = null, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\StatusDetails[]|\Psr\Http\Message\ResponseInterface|null                                     getStatuses(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\StatusDetails|\Psr\Http\Message\ResponseInterface|null                                       getStatus(string $idOrName, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\StatusCategory[]|\Psr\Http\Message\ResponseInterface|null                                    getStatusCategories(string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\StatusCategory|\Psr\Http\Message\ResponseInterface|null                                      getStatusCategory(string $idOrKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteStatusesById(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\JiraStatus[]|\Psr\Http\Message\ResponseInterface|null                                        getStatusesById(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\JiraStatus[]|\Psr\Http\Message\ResponseInterface|null                                        createStatuses(Model\StatusCreateRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateStatuses(Model\StatusUpdateRequest $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageOfStatuses|\Psr\Http\Message\ResponseInterface|null                                      search(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TaskProgressBeanObject|\Psr\Http\Message\ResponseInterface|null                              getTask(string $taskId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        cancelTask(string $taskId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanUiModificationDetails|\Psr\Http\Message\ResponseInterface|null                       getUiModifications(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\UiModificationIdentifiers|\Psr\Http\Message\ResponseInterface|null                           createUiModification(Model\CreateUiModificationDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteUiModification(string $uiModificationId, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        updateUiModification(string $uiModificationId, Model\UpdateUiModificationDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Avatars|\Psr\Http\Message\ResponseInterface|null                                             getAvatars(string $type, string $entityId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Avatar|\Psr\Http\Message\ResponseInterface|null                                              storeAvatar(string $type, string $entityId, $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteAvatar(string $type, string $owningObjectId, int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        getAvatarImageByType(string $type, array $queryParameters = [], string $fetch = self::FETCH_OBJECT, array $accept = [])
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        getAvatarImageByID(string $type, int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT, array $accept = [])
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        getAvatarImageByOwner(string $type, string $entityId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT, array $accept = [])
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        removeUser(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User|\Psr\Http\Message\ResponseInterface|null                                                getUser(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User|\Psr\Http\Message\ResponseInterface|null                                                createUser(Model\NewUserDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null                                              findBulkAssignableUsers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null                                              findAssignableUsers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanUser|\Psr\Http\Message\ResponseInterface|null                                        bulkGetUsers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\UserMigrationBean[]|\Psr\Http\Message\ResponseInterface|null                                 bulkGetUsersMigration(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        resetUserColumns(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ColumnItem[]|\Psr\Http\Message\ResponseInterface|null                                        getUserDefaultColumns(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setUserColumns(?array $requestBody = null, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\UnrestrictedUserEmail|\Psr\Http\Message\ResponseInterface|null                               getUserEmail(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\UnrestrictedUserEmail|\Psr\Http\Message\ResponseInterface|null                               getUserEmailBulk(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\GroupName[]|\Psr\Http\Message\ResponseInterface|null                                         getUserGroups(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null                                              findUsersWithAllPermissions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\FoundUsers|\Psr\Http\Message\ResponseInterface|null                                          findUsersForPicker(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PropertyKeys|\Psr\Http\Message\ResponseInterface|null                                        getUserPropertyKeys(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteUserProperty(string $propertyKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\EntityProperty|\Psr\Http\Message\ResponseInterface|null                                      getUserProperty(string $propertyKey, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        setUserProperty(string $propertyKey, $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null                                              findUsers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanUser|\Psr\Http\Message\ResponseInterface|null                                        findUsersByQuery(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanUserKey|\Psr\Http\Message\ResponseInterface|null                                     findUserKeysByQuery(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null                                              findUsersWithBrowsePermission(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null                                              getAllUsersDefault(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\User[]|\Psr\Http\Message\ResponseInterface|null                                              getAllUsers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Version|\Psr\Http\Message\ResponseInterface|null                                             createVersion(Model\Version $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteVersion(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Version|\Psr\Http\Message\ResponseInterface|null                                             getVersion(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Version|\Psr\Http\Message\ResponseInterface|null                                             updateVersion(string $id, Model\Version $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        mergeVersions(string $id, string $moveIssuesTo, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Version|\Psr\Http\Message\ResponseInterface|null                                             moveVersion(string $id, Model\VersionMoveBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\VersionIssueCounts|\Psr\Http\Message\ResponseInterface|null                                  getVersionRelatedIssues(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteAndReplaceVersion(string $id, Model\DeleteAndReplaceVersionBean $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\VersionUnresolvedIssuesCount|\Psr\Http\Message\ResponseInterface|null                        getVersionUnresolvedIssues(string $id, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteWebhookById(Model\ContainerForWebhookIDs $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanWebhook|\Psr\Http\Message\ResponseInterface|null                                     getDynamicWebhooksForApp(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ContainerForRegisteredWebhooks|\Psr\Http\Message\ResponseInterface|null                      registerDynamicWebhooks(Model\WebhookRegistrationDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\FailedWebhooks|\Psr\Http\Message\ResponseInterface|null                                      getFailedWebhooks(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WebhooksExpirationDate|\Psr\Http\Message\ResponseInterface|null                              refreshWebhooks(Model\ContainerForWebhookIDs $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\DeprecatedWorkflow[]|\Psr\Http\Message\ResponseInterface|null                                getAllWorkflows(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowIDs|\Psr\Http\Message\ResponseInterface|null                                         createWorkflow(Model\CreateWorkflowDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanWorkflowTransitionRules|\Psr\Http\Message\ResponseInterface|null                     getWorkflowTransitionRuleConfigurations(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowTransitionRulesUpdateErrors|\Psr\Http\Message\ResponseInterface|null                 updateWorkflowTransitionRuleConfigurations(Model\WorkflowTransitionRulesUpdate $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowTransitionRulesUpdateErrors|\Psr\Http\Message\ResponseInterface|null                 deleteWorkflowTransitionRuleConfigurations(Model\WorkflowsWithTransitionRulesDetails $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanWorkflow|\Psr\Http\Message\ResponseInterface|null                                    getWorkflowsPaginated(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteWorkflowTransitionProperty(int $transitionId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowTransitionProperty|\Psr\Http\Message\ResponseInterface|null                          getWorkflowTransitionProperties(int $transitionId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowTransitionProperty|\Psr\Http\Message\ResponseInterface|null                          createWorkflowTransitionProperty(int $transitionId, Model\WorkflowTransitionProperty $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowTransitionProperty|\Psr\Http\Message\ResponseInterface|null                          updateWorkflowTransitionProperty(int $transitionId, Model\WorkflowTransitionProperty $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteInactiveWorkflow(string $entityId, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PageBeanWorkflowScheme|\Psr\Http\Message\ResponseInterface|null                              getAllWorkflowSchemes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      createWorkflowScheme(Model\WorkflowScheme $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ContainerOfWorkflowSchemeAssociations|\Psr\Http\Message\ResponseInterface|null               getWorkflowSchemeProjectAssociations(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        assignSchemeToProject(Model\WorkflowSchemeProjectAssociation $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteWorkflowScheme(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      getWorkflowScheme(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      updateWorkflowScheme(int $id, Model\WorkflowScheme $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      createWorkflowSchemeDraftFromParent(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      deleteDefaultWorkflow(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\DefaultWorkflow|\Psr\Http\Message\ResponseInterface|null                                     getDefaultWorkflow(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      updateDefaultWorkflow(int $id, Model\DefaultWorkflow $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteWorkflowSchemeDraft(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      getWorkflowSchemeDraft(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      updateWorkflowSchemeDraft(int $id, Model\WorkflowScheme $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      deleteDraftDefaultWorkflow(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\DefaultWorkflow|\Psr\Http\Message\ResponseInterface|null                                     getDraftDefaultWorkflow(int $id, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      updateDraftDefaultWorkflow(int $id, Model\DefaultWorkflow $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      deleteWorkflowSchemeDraftIssueType(int $id, string $issueType, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeWorkflowMapping|\Psr\Http\Message\ResponseInterface|null                            getWorkflowSchemeDraftIssueType(int $id, string $issueType, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      setWorkflowSchemeDraftIssueType(int $id, string $issueType, Model\IssueTypeWorkflowMapping $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\TaskProgressBeanObject|\Psr\Http\Message\ResponseInterface|null                              publishDraftWorkflowScheme(int $id, Model\PublishDraftWorkflowScheme $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteDraftWorkflowMapping(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypesWorkflowMapping|\Psr\Http\Message\ResponseInterface|null                           getDraftWorkflow(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      updateDraftWorkflowMapping(int $id, Model\IssueTypesWorkflowMapping $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      deleteWorkflowSchemeIssueType(int $id, string $issueType, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypeWorkflowMapping|\Psr\Http\Message\ResponseInterface|null                            getWorkflowSchemeIssueType(int $id, string $issueType, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      setWorkflowSchemeIssueType(int $id, string $issueType, Model\IssueTypeWorkflowMapping $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        deleteWorkflowMapping(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\IssueTypesWorkflowMapping|\Psr\Http\Message\ResponseInterface|null                           getWorkflow(int $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowScheme|\Psr\Http\Message\ResponseInterface|null                                      updateWorkflowMapping(int $id, Model\IssueTypesWorkflowMapping $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ChangedWorklogs|\Psr\Http\Message\ResponseInterface|null                                     getIdsOfWorklogsDeletedSince(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\Worklog[]|\Psr\Http\Message\ResponseInterface|null                                           getWorklogsForIds(Model\WorklogIdsRequestBean $requestBody, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ChangedWorklogs|\Psr\Http\Message\ResponseInterface|null                                     getIdsOfWorklogsModifiedSince(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\PropertyKeys|\Psr\Http\Message\ResponseInterface|null                                        addonPropertiesResourceGetAddonPropertiesGet(string $addonKey, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        addonPropertiesResourceDeleteAddonPropertyDelete(string $addonKey, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\EntityProperty|\Psr\Http\Message\ResponseInterface|null                                      addonPropertiesResourceGetAddonPropertyGet(string $addonKey, string $propertyKey, string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\OperationMessage|\Psr\Http\Message\ResponseInterface|null                                    addonPropertiesResourcePutAddonPropertyPut(string $addonKey, string $propertyKey, $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        dynamicModulesResourceRemoveModulesDelete(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\ConnectModules|\Psr\Http\Message\ResponseInterface|null                                      dynamicModulesResourceGetModulesGet(string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        dynamicModulesResourceRegisterModulesPost(Model\ConnectModules $requestBody, string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        appIssueFieldValueUpdateResourceUpdateIssueFieldsPut(Model\ConnectCustomFieldValues $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \Psr\Http\Message\ResponseInterface|null                                                                        migrationResourceUpdateEntityPropertiesValuePut(string $entityType, array $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
 * @method static \JiraSdk\Api\Model\WorkflowRulesSearchDetails|\Psr\Http\Message\ResponseInterface|null                          migrationResourceWorkflowRuleSearchPost(Model\WorkflowRulesSearch $requestBody, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
 *
 * @see \JiraSdk\Client
 */
class Jira extends Facade
{
    protected static function getFacadeAccessor()
    {
        return 'jira';
    }
}
